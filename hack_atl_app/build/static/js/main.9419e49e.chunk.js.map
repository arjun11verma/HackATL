{"version":3,"sources":["Firebase.js","Product.js","Homepage.js","AddProduct.js","PurchaseView.js","App.js","serviceWorker.js","index.js"],"names":["firebase","databaseURL","projectId","Product","props","purchaseWindow","name","state","database","ref","child","set","setTimeout","window","open","description","cost","expirationDate","sourceHospital","clicked","Grid","item","CardActionArea","onClick","this","style","width","height","Card","backgroundColor","padding","container","spacing","alignItems","direction","justify","Typography","variant","Component","Homepage","addProduct","items","weight","inputList","productList","w","costR","descriptionR","expirationR","hospitalR","nameR","setState","concat","goToAddProduct","eachInput","once","then","snapshot","forEach","childSnapshot","subSnapshot","val","i","length","AppBar","fontFamily","textAlign","Button","marginTop","textTransform","marginLeft","AddProduct","specs","getProductSpecs","specList","document","getElementById","value","submit","FormControl","InputLabel","htmlFor","Input","id","aria-describedby","PurchaseView","purchase","remove","close","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9419e49e.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\n\r\nfirebase.initializeApp({\r\n    databaseURL: \"https://hackatl-77712.firebaseio.com/\",\r\n    projectId: \"hackatl-77712\"\r\n})\r\n\r\nexport default firebase;","import React, { Component } from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActionArea from '@material-ui/core/CardActionArea'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport firebase from './Firebase.js'\r\n\r\nclass Product extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: this.props.name,\r\n            description: this.props.description,\r\n            cost: this.props.cost,\r\n            expirationDate: this.props.expirationDate,\r\n            sourceHospital: this.props.sourceHospital,\r\n            clicked: false\r\n        };\r\n    }\r\n\r\n    purchaseWindow = () => {\r\n        var name = this.state.name;\r\n        firebase.database().ref(\"Products\").child(name).child(\"clicked\").set(true);\r\n        setTimeout(() => {\r\n            window.open('/PurchaseView');\r\n        }, 500);\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n            <Grid item>\r\n                <CardActionArea onClick={this.purchaseWindow} style={{ width: \"720px\", height: \"220px\" }}>\r\n                    <Card style={{ backgroundColor: \"azure\", width: \"700px\", height: \"200px\", padding: \"10px\" }}>\r\n                        <Grid container spacing={2} alignItems=\"center\" direction=\"column\" padding=\"50px\" justify=\"center\">\r\n                            <Grid item>\r\n                                <Typography variant=\"h5\">{this.state.name}</Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography variant=\"p3\">{this.state.description}</Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography variant=\"p3\">Cost: {this.state.cost}</Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography variant=\"p3\">Expiration Date: {this.state.expirationDate}</Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography variant=\"p3\">Source Hospital: {this.state.sourceHospital}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Card>\r\n                </CardActionArea>\r\n            </Grid>\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default Product;\r\n","import React, { Component } from 'react'\r\nimport Product from './Product.js'\r\nimport firebase from './Firebase.js'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nclass Homepage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            productList: []\r\n        };\r\n\r\n        var eachInput = []\r\n\r\n        firebase.database().ref(\"Products\").once('value').then(function(snapshot) {\r\n            snapshot.forEach(childSnapshot => {\r\n                childSnapshot.forEach(subSnapshot => {\r\n                    eachInput = eachInput.concat(subSnapshot.val());\r\n                });\r\n            });\r\n        });\r\n\r\n        setTimeout(() => {\r\n            for(var i = 0; i < (eachInput.length)/6; i++) {\r\n                this.addProduct(eachInput, i);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    addProduct = (items, weight) => {\r\n        var inputList = this.state.productList;\r\n        var w = 1 + weight*6;\r\n\r\n        var costR = items[0 + w];\r\n        var descriptionR = items[1 + w];\r\n        var expirationR = items[2 + w];\r\n        var hospitalR = items[3 + w];\r\n        var nameR = items[4 + w];\r\n\r\n        this.setState({\r\n            productList: inputList.concat(<Product name = {nameR} cost = {costR} sourceHospital = {hospitalR} description = {descriptionR} expirationDate = {expirationR}/>)\r\n        });\r\n    }\r\n\r\n    goToAddProduct = () => {\r\n        window.open('/AddProduct')\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n            <div>\r\n                <AppBar><Typography variant='h4' style={{ fontFamily: \"Garamond\", textAlign: \"center\" }}>MedConnection - Linking Hospitals to Local Clinics</Typography></AppBar>\r\n            </div>\r\n\r\n            <Grid container justify = \"center\">\r\n                <Grid item>\r\n                    <Button onClick = {this.goToAddProduct} style = {{marginTop: \"47px\", textAlign: \"center\", textTransform: \"none\"}}>\r\n                        <Typography variant = \"h6\" style = {{fontFamily: \"Garamond\"}}>If you are a hospital associate, click here to add a product!</Typography>\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n           \r\n            <Grid container direction=\"row\" style = {{marginLeft: \"0px\", marginTop: \"0px\", width: \"1520px\"}} spacing = {5}>\r\n                {this.state.productList}\r\n            </Grid>\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default Homepage;","import React, { Component } from 'react'\r\nimport firebase from './Firebase.js'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Input from '@material-ui/core/Input'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nclass AddProduct extends Component {\r\n    constructor(props) { \r\n        super(props);\r\n        this.state = {\r\n            specList: [\"name\", \"description\", \"cost\", \"expiration\", \"hospital\"]\r\n        }\r\n    }\r\n\r\n    addProduct = () => {\r\n        var specs = (this.getProductSpecs());\r\n        for (var i = 0; i < 5; i++) {\r\n            firebase.database().ref(\"Products\").child(specs[0]).child(this.state.specList[i]).set(specs[i]);\r\n        }\r\n        firebase.database().ref(\"Products\").child(specs[0]).child(\"clicked\").set(false);\r\n    }\r\n\r\n    getProductSpecs = () => {\r\n        var specs = [\"\", \"\", \"\", \"\", \"\"]\r\n        for (var i = 0; i < 5; i++) {\r\n            specs[i] = document.getElementById(this.state.specList[i]).value;\r\n            document.getElementById(this.state.specList[i]).value = \"\";\r\n        }\r\n        return specs\r\n    }\r\n\r\n    submit = () => {\r\n        this.addProduct();\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n            <Grid container direction=\"column\" alignItems=\"center\" style={{ backgroundColor: \"azure\", padding: \"9px\", marginTop: \"45px\" }} spacing={5}>\r\n                <Grid item>\r\n                    <h2 style={{ fontFamily: \"Garamond\" }}>Please fill in the fields below.</h2>\r\n                </Grid>\r\n                <Grid item>\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"name\">Product Name</InputLabel>\r\n                        <Input id=\"name\" aria-describedby=\"my-helper-text\" />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item>\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"description\">Product Description</InputLabel>\r\n                        <Input id=\"description\" aria-describedby=\"my-helper-text\" />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item>\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"cost\">Product Cost</InputLabel>\r\n                        <Input id=\"cost\" aria-describedby=\"my-helper-text\" />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item>\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"expiration\">Expiration Date</InputLabel>\r\n                        <Input id=\"expiration\" aria-describedby=\"my-helper-text\" />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item>\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"hospital\">Hospital Name</InputLabel>\r\n                        <Input id=\"hospital\" aria-describedby=\"my-helper-text\" />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button onClick={this.submit} style={{ backgroundColor: \"whitesmoke\", fontFamily: \"Garamond\" }}>Click to submit your product!</Button>\r\n                </Grid>\r\n            </Grid>\r\n        </>)\r\n    }\r\n}\r\n\r\nexport default AddProduct;","import React, { Component } from 'react'\r\nimport Input from '@material-ui/core/Input'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport firebase from './Firebase.js'\r\n\r\nclass PurchaseView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n    \r\n    purchase = () => {\r\n        firebase.database().ref(\"Products\").once('value').then(function(snapshot) {\r\n            snapshot.forEach(childSnapshot => {\r\n                if(childSnapshot.child(\"clicked\").val()) {\r\n                    firebase.database().ref(\"Products\").child(childSnapshot.child(\"name\").val()).remove();\r\n                }\r\n            });\r\n        });  \r\n\r\n        setTimeout(() => {\r\n            window.close()\r\n        }, 2000);\r\n    }\r\n\r\n    render() {\r\n        return(<>\r\n            <Grid container direction=\"column\" alignItems=\"center\" style={{ backgroundColor: \"azure\", padding: \"10px\", marginTop: \"140px\" }} spacing={5}>\r\n                <Grid item>\r\n                    <h2 style={{ fontFamily: \"Garamond\" }}>Purchasing Window</h2>\r\n                </Grid>\r\n                <Grid item>\r\n                    <p1 style={{ fontFamily: \"Garamond\" }}>Please enter your payment credentials below and press the button below if you are absolutely sure about buying our product.</p1>\r\n                </Grid>\r\n                <Grid item>\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"cardNum\">Card Number</InputLabel>\r\n                        <Input id=\"cost\" aria-describedby=\"my-helper-text\" />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item>\r\n                    <FormControl>\r\n                        <InputLabel htmlFor=\"userCred\">Payment Credentials</InputLabel>\r\n                        <Input id=\"cost\" aria-describedby=\"my-helper-text\" />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button onClick = {this.purchase} style = {{fontFamily: \"Garamond\"}}>Click to purchase the product</Button>\r\n                </Grid>\r\n            </Grid>\r\n        </>)\r\n    }\r\n}\r\n\r\nexport default PurchaseView;","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\n\nimport Homepage from './Homepage'\nimport AddProduct from './AddProduct'\nimport PurchaseView from './PurchaseView'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path = \"/\" component = {Homepage}/>\n        <Route exact path = \"/AddProduct\" component = {AddProduct}/>\n        <Route exact path = \"/PurchaseView\" component = {PurchaseView}/>\n      </Switch>\n    </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}